@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.IncomeCategoriesPage>

@using System.IO;
@using System.Web;
@using Umbraco.Cms.Core.Services;
@using Umbraco.Cms.Web.Common.PublishedModels;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;

@inject IMediaService mediaService

@{
    Layout = "Master.cshtml";
}

<div class="card">
    <div class="card-header">
        <button type="button" class="btn btn-sm waves-effect waves-light btn-primary" onclick="openCreateModal()">
            <i class="icofont icofont-ui-add"></i>
            @Umbraco.GetDictionaryValue("IncomeCategories.Table.Buttons.Add")
        </button>
    </div>
    <div class="card-block">
        <div class="dt-responsive table-responsive">
            <table id="dt-table" class="table table-striped table-bordered nowrap">
                <thead>
                    <tr>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Id")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Name")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Member")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Actions")</th>
                    </tr>
                </thead>
                <tfoot>
                    <tr>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Id")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Name")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Member")</th>
                        <th>@Umbraco.GetDictionaryValue("IncomeCategories.Table.Headers.Actions")</th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

<div class="modal fade exm-modal" id="modal-create" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header exm-modal-primary">
                <h4 class="modal-title">@Umbraco.GetDictionaryValue("IncomeCategories.Form.Title")</h4>
            </div>
            <div class="modal-body">
                <form id="form-create" novalidate>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">@Umbraco.GetDictionaryValue("IncomeCategories.Form.Inputs.Name")</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" name="name" id="income-category-name" placeholder="@Umbraco.GetDictionaryValue("IncomeCategories.Form.Inputs.Name")">
                            <span class="messages"></span>
                        </div>
                    </div>
                    <hr />
                    <button type="button" class="btn btn-default waves-effect " data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary waves-effect waves-light ">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

@{
    var datatablesFolder = Umbraco.MediaAtRoot().FirstOrDefault(f => f.Name.ToLower().Equals("datatables"));
    var languageFile = datatablesFolder.Descendants().FirstOrDefault(f => f.Name.ToLower() == "language");
}

@section Javascript {
    <script type="text/javascript" src="/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="/js/responsive.bootstrap4.min.js"></script>
    <script type="text/javascript" src="/js/dataTables.bootstrap4.min.js"></script>
    <script type="text/javascript" src="/js/validate.js"></script>

    <script type="text/javascript">
        var createModal = null;
        var createForm = null;
        var constraints = {
            name: {
                presence: {
                    message: '@(Html.Raw(Umbraco.GetDictionaryValue("IncomeCategories.Form.Errors.Name.Required")))'
                },
                length: {
                    minimum: 3,
                    tooShort: '@(Html.Raw(Umbraco.GetDictionaryValue("IncomeCategories.Form.Errors.Name.MinLength")))',
                    maximum: 20,
                    tooLong: '@(Html.Raw(Umbraco.GetDictionaryValue("IncomeCategories.Form.Errors.Name.MaxLength")))'
                },
                format: {
                    pattern: '[a-z0-9]+',
                    flags: 'i',
                    message: '@(Html.Raw(Umbraco.GetDictionaryValue("IncomeCategories.Form.Errors.Name.Format")))'
                }
            }
        };

        $('#dt-table').DataTable({
            bLengthChange: false,
            processing: true,
            serverSide: true,
            ajax: {
                url: '/api/incomecategory/table',
                type: 'post',
                contentType: 'application/json; charset=utf-8',
                async: true,
                data: function (data) {
                    return JSON.stringify(data);
                }
            },
            responseive: true,
            columns: [
                {
                    data: 'id'
                },
                {
                    data: 'name'
                },
                {
                    data: 'memberId',
                    render: function (data, type, row) {
                        return row.member;
                    },
                    sortable: false
                },
                {
                    data: null,
                    render: function (data, type, row) {
                        var html = '';
                        var subHtml = '';

                        if (data.canEdit || data.canDelete) {
                            html = '<div class="btn-group" role="group">{0}</div>'
                        }

                        if (data.canEdit) {
                            subHtml = `<button type="button" class="btn btn-warning btn-mini waves-effect waves-light" onclick="editClick(${data.id})"><i class="icofont icofont-ui-edit"></i>@(Umbraco.GetDictionaryValue("IncomeCategories.Table.Buttons.Edit"))</button>`;
                        }

                        if (data.canDelete) {
                            subHtml += `<button type="button" class="btn btn-danger btn-mini waves-effect waves-light" onclick="deleteClick(${data.id})"><i class="icofont icofont-ui-delete"></i>@(Umbraco.GetDictionaryValue("IncomeCategories.Table.Buttons.Delete"))</button>`;
                        }

                        return (data.canEdit || data.canDelete) ? html.replace('{0}', subHtml) : html;
                    },
                    sortable: false
                }
            ],
            language: {
                url: '@languageFile.Url()'
            }
        });

        setFormValidation();

        function openCreateModal() {
            if (!createModal) {
                createModal = $('#modal-create').modal({
                    keyboard: false,
                    backdrop: 'static'
                });
            } else {
                createModal.modal('show');
            }
        }

        function editClick(id) {
            alert(`Editar: ${id}`);
        }

        function deleteClick(id) {
            alert(`Eliminar: ${id}`);
        }

        function setFormValidation() {
            if (!createForm) {
                createForm = document.querySelector("form#form-create");
                createForm.addEventListener('submit', function (ev) {
                    ev.preventDefault();
                    handleFormSubmit(createForm);
                });

                var inputName = document.querySelector("#income-category-name");
                inputName.addEventListener('change', function (ev) {
                    var errors = validate(form, constraints) || {};
                    showErrorsForInput(this, errors[this.name]);
                });
            }
        }

        function handleFormSubmit(form, input) {
            var errors = validate(form, constraints, { fullMessages: false });
            showErrors(form, errors || {});
            if (!errors) {
                showSuccess();
            }
        }

        function showErrors(form, errors) {
            $.each(form.querySelectorAll("input[name], select[name]"), function (index, input) {
                showErrorsForInput(input, errors && errors[input.name]);
            });
        }

        function showErrorsForInput(input, errors) {
            var formGroup = closestParent(input.parentNode, "form-group")
                , messages = formGroup.querySelector(".messages");
            resetFormGroup(formGroup);
            if (errors) {
                formGroup.classList.add("has-error");
                $.each(errors, function (index, error) {
                    addError(messages, error, input);
                });
            } else {
                formGroup.classList.add("has-success");
            }
        }

        function closestParent(child, className) {
            if (!child || child == document) {
                return null;
            }
            if (child.classList.contains(className)) {
                return child;
            } else {
                return closestParent(child.parentNode, className);
            }
        }

        function resetFormGroup(formGroup) {
            formGroup.classList.remove("has-error");
            formGroup.classList.remove("has-success");
            $.each(formGroup.querySelectorAll(".text-danger"), function (index, el) {
                el.parentNode.removeChild(el);
            });
        }

        function addError(messages, error, input) {
            var block = document.createElement("p");
            block.classList.add("text-danger");
            block.classList.add("error");
            block.innerText = error;
            messages.appendChild(block);
            $(input).addClass("input-danger");
        }
    </script>
}